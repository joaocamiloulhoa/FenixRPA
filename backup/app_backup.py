import streamlit as st
import pandas as pd
import time
from datetime import datetime
from cria_pdf import criar_pdf_streamlit
from lancamento_fenix import executar_lancamento_fenix, get_recomendacao, atualizar_status_planilha

# Mantendo apenas as fun√ß√µes auxiliares de texto que s√£o usadas pela interface

def get_objetivo_text(nucleo):
    """Retorna o texto do objetivo"""
    return f"O presente relat√≥rio foi elaborado por solicita√ß√£o do GEOCAT com o objetivo de avaliar os efeitos dos sinistros nos plantios do N√∫cleo {nucleo} e determinar as recomenda√ß√µes para as √°reas avaliadas em campo pela √°rea de Mensura√ß√£o."

def get_diagnostico_text():
    """Retorna o texto de diagn√≥stico fixo"""
    return (
        "Foi objeto deste Laudo as √°reas afetadas por inc√™ndios florestais e vendaval (D√©ficit H√≠drico), conforme as caracter√≠sticas de danos a seguir:\n\n"
        "Seca e mortalidade dos plantios devido ao fogo ou d√©ficit h√≠drico em diferentes n√≠veis de severidade;\n\n"
        "Inclina√ß√£o, tombamento e quebra de √°rvores devido a ocorr√™ncia de vendaval.\n\n"
        "Para as ocorr√™ncias foram observados danos em reboleiras de diferentes tamanhos de √°rea (ha) e intensidade dentro dos talh√µes."
    )

def get_licoes_text():
    """Retorna o texto fixo de li√ß√µes aprendidas"""
    return (
        "As visitas de campo juntamente com imagens de drones s√£o fundamentais para a tomada de decis√£o. "
        "As ocorr√™ncias de sinistros s√£o din√¢micas e, desta forma, √© fundamental aguardar o tempo recomendado para a verifica√ß√£o da recupera√ß√£o das plantas bem como manter as informa√ß√µes atualizadas, especialmente nas ocorr√™ncias de D√©ficit H√≠drico e Inc√™ndios Florestais. "
        "A efetiva√ß√£o da baixa e tratativas devem ocorrer imediatamente ap√≥s a libera√ß√£o do laudo, evitando-se retrabalho e dificuldades na rastreabilidade de todo o processo, assim como o comprometimento da produtividade no site."
    )

def get_consideracoes_text():
    """Retorna o texto das considera√ß√µes finais"""
    return (
        "Face ao exposto, com a avalia√ß√£o de ha, recomenda-se:\n\n"
        "O valor total imobilizado a ser apurado como preju√≠zo ser√° de R$ X (XX reais e XXXX centavos), "
        "informado pela √°rea Cont√°bil. Vale ressaltar que o montante descrito pode sofrer altera√ß√µes "
        "entre o per√≠odo de emiss√£o, assinaturas e devida baixa dos ativos; no momento da baixa, a "
        "Gest√£o Patrimonial far√° a atualiza√ß√£o e manter√° comprova√ß√£o anexa ao laudo. A destina√ß√£o da "
        "madeira e eventuais dificuldades operacionais n√£o foram objeto deste laudo.\n\n"
        "As recomenda√ß√µes s√£o por UP, considerando a ocorr√™ncia de maior abrang√™ncia; pode, contudo, "
        "existir mais de um tipo de sinistro na mesma UP, sendo necess√°ria uma avalia√ß√£o detalhada do "
        "microplanejamento quanto ao aproveitamento da madeira.\n\n"
        "O laudo foi elaborado com base em croquis e fotos fornecidos pela equipe de mensura√ß√£o florestal. "
        "A aus√™ncia de imagens a√©reas de alta resolu√ß√£o e a falta de visitas de campo por parte dos "
        "extensionistas prejudicam a avalia√ß√£o detalhada das UPs. Assim, se a equipe de Silvicultura, "
        "durante a execu√ß√£o das a√ß√µes recomendadas, constatar diverg√™ncias em campo, recomenda-se delimitar "
        "a √°rea divergente a ser aproveitada e solicitar uma an√°lise adicional √† equipe de extens√£o tecnol√≥gica."
    )

def lancamento_fenix():
    st.header("Lan√ßamento de Informa√ß√µes no F√™nix")
    
    # Upload do arquivo Excel
    uploaded_file = st.file_uploader("Escolha um arquivo Excel", type=['xlsx', 'xls'], key="lancamento_excel_uploader")
    
    if uploaded_file is not None:
        try:
            # L√™ o arquivo Excel
            df = pd.read_excel(uploaded_file)
            
            # Verifica se as colunas necess√°rias existem
            required_columns = [
                'UP', 'Nucleo', 'Idade', 'Ocorr√™ncia Predominante',
                'Severidade Predominante', 'Incidencia', 'Laudo Existente',
                'Recomendacao'
            ]
            
            missing_columns = [col for col in required_columns if col not in df.columns]
            if missing_columns:
                st.error(f"Colunas obrigat√≥rias n√£o encontradas: {', '.join(missing_columns)}")
                st.write("Colunas dispon√≠veis no arquivo:", list(df.columns))
                return
            
            # Filtra apenas registros sem laudo
            df_sem_laudo = df[df['Laudo Existente'].str.upper() == 'N√ÉO'].copy()
            
            if len(df_sem_laudo) == 0:
                st.warning("N√£o h√° registros sem laudo para processar.")
                return
            
            # Agrupa por n√∫cleo
            nucleos_sem_laudo = df_sem_laudo.groupby('Nucleo').size().reset_index(name='quantidade_ups')
            
            # Overview dos dados
            st.subheader("üìä Overview dos Dados")
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric("Total de UPs sem laudo", len(df_sem_laudo))
            with col2:
                st.metric("N√∫cleos sem laudo", len(nucleos_sem_laudo))
            with col3:
                st.metric("Total de registros", len(df))
            
            # Tabela de n√∫cleos
            st.subheader("üè¢ N√∫cleos sem Laudo")
            st.dataframe(nucleos_sem_laudo, use_container_width=True)
            
            # Op√ß√µes de lan√ßamento
            st.subheader("üöÄ Op√ß√µes de Lan√ßamento")
            
            # Bot√µes para cada n√∫cleo
            cols = st.columns(min(len(nucleos_sem_laudo) + 1, 4))
            
            # Bot√£o para todos os n√∫cleos
            with cols[0]:
                if st.button("üéØ Todos os N√∫cleos", key="todos_nucleos", use_container_width=True):
                    st.session_state.nucleos_selecionados = nucleos_sem_laudo['Nucleo'].tolist()
                    st.session_state.opcao_selecionada = "todos"
            
            # Bot√µes individuais para cada n√∫cleo
            for idx, nucleo in enumerate(nucleos_sem_laudo['Nucleo'].tolist()):
                col_idx = (idx + 1) % 4
                with cols[col_idx]:
                    if st.button(f"üìç {nucleo}", key=f"nucleo_{nucleo}", use_container_width=True):
                        st.session_state.nucleos_selecionados = [nucleo]
                        st.session_state.opcao_selecionada = nucleo
            
            # Se uma op√ß√£o foi selecionada, mostra o bot√£o Play
            if hasattr(st.session_state, 'opcao_selecionada'):
                st.success(f"Selecionado: {st.session_state.opcao_selecionada}")
                
                # Dados que ser√£o processados
                ups_para_processar = df_sem_laudo[df_sem_laudo['Nucleo'].isin(st.session_state.nucleos_selecionados)]
                
                st.subheader("üìã Dados que ser√£o processados:")
                st.dataframe(ups_para_processar[['UP', 'Nucleo', 'Ocorr√™ncia Predominante', 'Severidade Predominante', 'Incidencia']], use_container_width=True)
                
                # Bot√£o Play para iniciar
                if st.button("‚ñ∂Ô∏è INICIAR LAN√áAMENTO", key="play_button", type="primary", use_container_width=True):
                    processar_lancamento(ups_para_processar, st.session_state.nucleos_selecionados, df)
                    
        except Exception as e:
            st.error(f"Erro ao ler o arquivo: {str(e)}")

def processar_lancamento(df_ups, nucleos_selecionados, df_original):
    """Fun√ß√£o principal que processa o lan√ßamento usando o m√≥dulo lancamento_fenix"""
    try:
        st.info("üöÄ Iniciando processamento...")
        
        # Salvar DataFrame original no session_state para posterior atualiza√ß√£o
        st.session_state.df_original = df_original.copy()
        
        # Usar o m√≥dulo de automa√ß√£o
        resultado = executar_lancamento_fenix(df_ups, nucleos_selecionados)
        
        if resultado:
            st.balloons()  # Anima√ß√£o de comemora√ß√£o
            st.success("üéâ Processamento de todos os n√∫cleos conclu√≠do!")
            
            # NOVA FUNCIONALIDADE: Perguntar sobre atualiza√ß√£o da planilha
            st.subheader("üìù Atualiza√ß√£o da Planilha")
            st.info("Deseja atualizar o status das UPs processadas com sucesso na planilha?")
            
            col1, col2 = st.columns(2)
            with col1:
                if st.button("‚úÖ SIM - Atualizar Status", key="atualizar_sim", type="primary"):
                    # Obter UPs processadas com sucesso (ser√° passado pelo resultado da automa√ß√£o)
                    ups_processadas = getattr(st.session_state, 'ups_processadas_com_sucesso', [])
                    if ups_processadas:
                        if atualizar_status_planilha(st.session_state.df_original, ups_processadas):
                            st.success("üìä Planilha atualizada com sucesso!")
                        else:
                            st.error("‚ùå Erro ao atualizar a planilha.")
                    else:
                        st.warning("‚ö†Ô∏è Nenhuma UP foi processada com sucesso.")
                        
            with col2:
                if st.button("‚ùå N√ÉO - Manter Original", key="atualizar_nao"):
                    st.info("‚úã Planilha mantida sem altera√ß√µes.")
        else:
            st.error("‚ùå Houve erros durante o processamento. Verifique os logs acima.")
        
    except Exception as e:
        st.error(f"Erro durante o processamento: {str(e)}")

def criar_pdf():
    # Chama a fun√ß√£o do m√≥dulo cria_pdf.py
    criar_pdf_streamlit()

def main():
    st.title("Sistema de Automa√ß√£o RPA")
    
    # Criando o menu lateral
    st.sidebar.title("Menu de Op√ß√µes")
    opcao = st.sidebar.radio(
        "Selecione a opera√ß√£o desejada:",
        ["Lan√ßamento no F√™nix", "Criar PDF com Imagens e Croquis"],
        key="menu_principal"
    )
    
    # Navega√ß√£o baseada na escolha do usu√°rio
    if opcao == "Lan√ßamento no F√™nix":
        lancamento_fenix()
    else:
        criar_pdf()

if __name__ == "__main__":
    main()
